plugins {
    id 'java'
    id 'application'
}

group = 'org.unicitylabs'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass = 'org.unicitylabs.proxy.Main'
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation 'org.eclipse.jetty:jetty-server:12.0.14'
    implementation 'org.eclipse.jetty:jetty-client:12.0.14'
    implementation 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.14'
    implementation 'org.eclipse.jetty.ee10:jetty-ee10-proxy:12.0.14'

    implementation 'commons-io:commons-io:2.20.0'
    implementation 'com.bucket4j:bucket4j-core:8.10.1'
    
    implementation 'com.beust:jcommander:1.82'
    
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.5.13'
    
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'org.flywaydb:flyway-core:9.22.3'
    
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'

    implementation 'org.unicitylabs:java-state-transition-sdk:1.2.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.17.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.eclipse.jetty:jetty-server:12.0.14'
    testImplementation 'org.eclipse.jetty:jetty-client:12.0.14'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testImplementation 'org.testcontainers:testcontainers:1.19.5'
    testImplementation 'org.testcontainers:postgresql:1.19.5'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.5'
}

// Virtual threads are stable in Java 21+, no preview needed

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
    }
}

tasks.named('run') {
    standardInput = System.in
    if (project.hasProperty('args')) {
        args project.args.split()
    }
}

// Create a fat JAR with all dependencies
tasks.register('fatJar', Jar) {
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Include compiled classes and resources
    from sourceSets.main.output

    // Include all dependencies
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    // Exclude signature files to avoid security exceptions
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes 'Main-Class': 'org.unicitylabs.proxy.Main'
    }
}

tasks.named('build') {
    dependsOn fatJar
}

// Create a distribution with all dependencies
distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath
        }
    }
}

// Task to create a simple start script
tasks.register('createStartScripts') {
    doLast {
        def scriptFile = file("$buildDir/scripts/start.sh")
        scriptFile.parentFile.mkdirs()
        scriptFile.text = """#!/bin/bash
java --enable-preview -cp "lib/*" org.unicitylabs.proxy.Main "\$@"
"""
        scriptFile.setExecutable(true)
    }
}

tasks.named('assembleDist') {
    dependsOn createStartScripts
}